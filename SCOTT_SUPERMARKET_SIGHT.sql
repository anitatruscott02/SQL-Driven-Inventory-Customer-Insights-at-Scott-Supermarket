--How many distinct regions, territories, or cities are represented in the dataset?
SELECT COUNT(DISTINCT TerritoryID) AS TotalRegions
FROM Sales.SalesTerritory;

-- In which city or territory is each store or branch located?
SELECT TerritoryID, Name AS TerritoryName, CountryRegionCode
FROM Sales.SalesTerritory;

--How many distinct product categories or lines exist in the dataset?
SELECT COUNT(DISTINCT Name) AS TotalProductCategories
FROM Production.ProductCategory;

--Which product line is the highest seller based on revenue and volume?
SELECT 
    pc.Name AS ProductCategory,
    SUM(od.OrderQty) AS TotalUnitsSold,
    SUM(od.LineTotal) AS TotalRevenue
FROM Sales.SalesOrderDetail od
JOIN Production.Product p ON od.ProductID = p.ProductID
JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY pc.Name
ORDER BY TotalRevenue DESC;

--What is the total monthly revenue generated by each product line?
SELECT 
    DATEPART(YEAR, soh.OrderDate) AS SalesYear,
    DATEPART(MONTH, soh.OrderDate) AS SalesMonth,
    pc.Name AS ProductCategory,
    SUM(od.LineTotal) AS TotalRevenue
FROM Sales.SalesOrderHeader soh
JOIN Sales.SalesOrderDetail od ON soh.SalesOrderID = od.SalesOrderID
JOIN Production.Product p ON od.ProductID = p.ProductID
JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY DATEPART(YEAR, soh.OrderDate), DATEPART(MONTH, soh.OrderDate), pc.Name
ORDER BY SalesYear, SalesMonth, TotalRevenue DESC;

-- Which month recorded the highest overall Cost of Goods Sold (COGS)?
SELECT TOP 1 
    DATEPART(YEAR, OrderDate) AS SalesYear,
    DATEPART(MONTH, OrderDate) AS SalesMonth,
    SUM(TotalDue) AS TotalCOGS
FROM Sales.SalesOrderHeader
GROUP BY DATEPART(YEAR, OrderDate), DATEPART(MONTH, OrderDate)
ORDER BY TotalCOGS DESC;

-- Which product line contributes the most to total revenue?
SELECT TOP 1 
    pc.Name AS ProductCategory,
    SUM(od.LineTotal) AS TotalRevenue
FROM Sales.SalesOrderDetail od
JOIN Production.Product p ON od.ProductID = p.ProductID
JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY pc.Name
ORDER BY TotalRevenue DESC;

-- Can we classify each product line as "Good" or "Bad" based on whether its
--sales exceed the average?
WITH CategorySales AS (
    SELECT 
        pc.Name AS ProductCategory,
        SUM(od.LineTotal) AS TotalRevenue
    FROM Sales.SalesOrderDetail od
    JOIN Production.Product p ON od.ProductID = p.ProductID
    JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
    JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
    GROUP BY pc.Name
)
SELECT ProductCategory,
       TotalRevenue,
       CASE 
           WHEN TotalRevenue > (SELECT AVG(TotalRevenue) FROM CategorySales) THEN 'Good'
           ELSE 'Bad'
       END AS ProductCategoryStatus
FROM CategorySales;

--How do monthly and daily sales trends evolve over time?
SELECT 
    DATEPART(YEAR, OrderDate) AS SalesYear,
    DATEPART(MONTH, OrderDate) AS SalesMonth,
    COUNT(SalesOrderID) AS TotalSales
FROM Sales.SalesOrderHeader
GROUP BY DATEPART(YEAR, OrderDate), DATEPART(MONTH, OrderDate)
ORDER BY SalesYear, SalesMonth;

--How many high-value transactions (above the average order value) occur?
SELECT 
    SalesOrderID,
    TotalDue,
    (SELECT AVG(TotalDue) FROM Sales.SalesOrderHeader) AS AvgOrderValue
FROM Sales.SalesOrderHeader
WHERE TotalDue > (SELECT AVG(TotalDue) FROM Sales.SalesOrderHeader);

--How do sales vary by time of day and by weekday?
SELECT 
    DATEPART(WEEKDAY, OrderDate) AS Weekday,
    DATEPART(HOUR, OrderDate) AS HourOfDay,
    COUNT(SalesOrderID) AS TotalSales
FROM Sales.SalesOrderHeader
GROUP BY DATEPART(WEEKDAY, OrderDate), DATEPART(HOUR, OrderDate)
ORDER BY Weekday, HourOfDay;

--How many unique customer segments are present in the dataset?
SELECT 
    CASE 
        WHEN StoreID IS NOT NULL THEN 'Business'
        ELSE 'Individual'
    END AS CustomerSegment,
    COUNT(CustomerID) AS TotalCustomers
FROM Sales.Customer
GROUP BY CASE 
        WHEN StoreID IS NOT NULL THEN 'Business'
        ELSE 'Individual'
    END;
--Which customer segment contributes the most to sales?
SELECT 
    CASE 
        WHEN c.StoreID IS NOT NULL THEN 'Business'
        ELSE 'Individual'
    END AS CustomerSegment,
    SUM(soh.TotalDue) AS TotalRevenue
FROM Sales.SalesOrderHeader soh
JOIN Sales.Customer c ON soh.CustomerID = c.CustomerID
GROUP BY CASE 
        WHEN c.StoreID IS NOT NULL THEN 'Business'
        ELSE 'Individual'
    END
ORDER BY TotalRevenue DESC;

--Customer Type Distribution Across Regions
SELECT 
    s.TerritoryID,
    p.PersonType,
    COUNT(c.CustomerID) AS TotalCustomers
FROM Sales.Customer c
JOIN Person.Person p ON c.PersonID = p.BusinessEntityID
JOIN Sales.SalesTerritory s ON c.TerritoryID = s.TerritoryID
GROUP BY s.TerritoryID, p.PersonType
ORDER BY s.TerritoryID, TotalCustomers DESC;

--During which time of day and on which days do customers leave the highest ratings?
SELECT 
    DATEPART(WEEKDAY, ReviewDate) AS Weekday,
    DATEPART(HOUR, ReviewDate) AS HourOfDay,
    AVG(Rating) AS AvgRating
FROM Production.ProductReview
WHERE Rating IS NOT NULL
GROUP BY DATEPART(WEEKDAY, ReviewDate), DATEPART(HOUR, ReviewDate)
ORDER BY AvgRating DESC;

--Check the total inventory available for each product category
SELECT 
    pc.Name AS ProductCategory, 
    SUM(pi.Quantity) AS TotalInventory
FROM Production.ProductInventory pi
JOIN Production.Product p ON pi.ProductID = p.ProductID
JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY pc.Name
ORDER BY TotalInventory DESC;

-- Calculate the total number of units sold per product category
SELECT 
    pc.Name AS ProductCategory, 
    SUM(sod.OrderQty) AS TotalUnitsSold
FROM Sales.SalesOrderDetail sod
JOIN Production.Product p ON sod.ProductID = p.ProductID
JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
GROUP BY pc.Name
ORDER BY TotalUnitsSold DESC;

--Compute the Inventory Turnover Ratio per Product Category
--Formula: Inventory Turnover = Total Units Sold / Average Inventory
WITH AvgInventory AS (
    SELECT 
        p.ProductID,
        AVG(pi.Quantity) AS AvgStock
    FROM Production.ProductInventory pi
    JOIN Production.Product p ON pi.ProductID = p.ProductID
    GROUP BY p.ProductID
)
SELECT 
    pc.Name AS ProductCategory, 
    SUM(sod.OrderQty) / NULLIF(AVG(ai.AvgStock), 0) AS InventoryTurnoverRatio
FROM Sales.SalesOrderDetail sod
JOIN Production.Product p ON sod.ProductID = p.ProductID
JOIN Production.ProductSubcategory ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
JOIN Production.ProductCategory pc ON ps.ProductCategoryID = pc.ProductCategoryID
JOIN AvgInventory ai ON p.ProductID = ai.ProductID
GROUP BY pc.Name
ORDER BY InventoryTurnoverRatio DESC;

--Identify products with the highest and lowest turnover rates
WITH AvgInventory AS (
    SELECT 
        p.ProductID,
        p.Name AS ProductName,
        AVG(pi.Quantity) AS AvgStock
    FROM Production.ProductInventory pi
    JOIN Production.Product p ON pi.ProductID = p.ProductID
    GROUP BY p.ProductID, p.Name
)
SELECT 
    p.Name AS ProductName, 
    SUM(sod.OrderQty) / NULLIF(ai.AvgStock, 0) AS InventoryTurnoverRatio
FROM Sales.SalesOrderDetail sod
JOIN Production.Product p ON sod.ProductID = p.ProductID
JOIN AvgInventory ai ON p.ProductID = ai.ProductID
GROUP BY p.Name, ai.AvgStock
ORDER BY InventoryTurnoverRatio DESC;

--Calculate the Average Time to Sell Stocked Products
SELECT 
    p.Name AS ProductName, 
    DATEDIFF(DAY, MIN(soh.OrderDate), GETDATE()) / COUNT(DISTINCT sod.SalesOrderID) AS AvgDaysToSell
FROM Sales.SalesOrderDetail sod
JOIN Sales.SalesOrderHeader soh ON sod.SalesOrderID = soh.SalesOrderID
JOIN Production.Product p ON sod.ProductID = p.ProductID
GROUP BY p.Name
ORDER BY AvgDaysToSell ASC;

--Identify overstocked products with low sales
SELECT 
    p.Name AS ProductName, 
    pi.Quantity AS CurrentStock, 
    COALESCE(SUM(sod.OrderQty), 0) AS TotalSold
FROM Production.ProductInventory pi
LEFT JOIN Sales.SalesOrderDetail sod ON pi.ProductID = sod.ProductID
LEFT JOIN Production.Product p ON pi.ProductID = p.ProductID
GROUP BY p.Name, pi.Quantity
HAVING pi.Quantity > 10 * COALESCE(SUM(sod.OrderQty), 1)  -- Products with 10x more stock than sales
ORDER BY pi.Quantity DESC;

--Identify fast-selling products that are at risk of stockouts
SELECT 
    p.Name AS ProductName, 
    pi.Quantity AS CurrentStock, 
    SUM(sod.OrderQty) AS TotalSold
FROM Production.ProductInventory pi
JOIN Sales.SalesOrderDetail sod ON pi.ProductID = sod.ProductID
JOIN Production.Product p ON pi.ProductID = p.ProductID
GROUP BY p.Name, pi.Quantity
HAVING pi.Quantity < SUM(sod.OrderQty) * 0.2  -- Products with stock less than 20% of sales
ORDER BY TotalSold DESC;



















